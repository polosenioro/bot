import pandas as pd
import folium
from folium.plugins import MarkerCluster
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter
from tqdm import tqdm

# --- 1. Пример данных: заменить на ваши
rows = [
    ("Таганрог", 19500),
    ("Псков", 22100),
    ("Ульяновск", 23400),
    ("Владимир", 26000),
    ("Геленджик", 26000),
    ("Нижневартовск", 28600),
    ("Адлер", 31200),
    ("Тула", 32500),
    ("Брянск", 32500),
    ("Новороссийск", 32500),
    ("Калининград", 32500),
    ("Владикавказ", 32500),
    ("Домодедово", 35100),
    ("Москва", 39000),
    ("Курск", 39000),
    ("Махачкала", 39000),
    ("Владивосток", 45500),
    ("Наро-фоминск", 10400),
    ("Астрахань", 13000),
    ("Пятигорск", 13000),
    ("Челябинск", 15600),
    ("Тамбов", 19500),
    ("Альметьевск", 19500),
    ("Сергиев Посад", 20800),
    ("Омск", 20800),
    ("Пушкино", 20800),
    ("Обнинск", 23400),
    ("Нижний Новгород", 10400),
    ("Набережные Челны", 23400),
    ("Краснодар", 23400),
    ("Пермь", 23400),
    ("Тверь", 26000),
    ("Одинцово", 26000),
    ("Волгоград", 26000),
    ("Смоленск", 26000),
    ("Нальчик", 26000),
    ("Самара", 28600),
    ("Чехов", 32500),
    ("Ступино", 32500),
    ("Красногорск", 32500),
    ("Дмитров", 32500),
    ("Ивантеевка", 32500),
    ("Троицк", 32500),
    ("Серпухов", 32500),
    ("Химки", 36400),
    ("Щербинка", 36400),
    ("Солнечногорск", 39000),
    ("Хабаровск", 39000),
    ("Долгопрудный", 39000),
    ("Новый Уренгой", 39000),
    ("Петрозаводск", 7800),
    ("Калуга", 7800),
    ("Ростов-на-Дону", 10400),
    ("Великий Новгород", 10400),
    ("Уфа", 10400),
    ("Ижевск", 10400),
    ("Ставрополь", 10400),
    ("Череповец", 13000),
    ("Люберцы", 13000),
    ("Сургут", 13000),
    ("Волжский", 13000),
    ("Электросталь", 13000),
    ("Подольск", 13000),
    ("Нижнекамск", 13000),
    ("Вологда", 13000),
    ("Дзержинск", 13000),
    ("Орел", 13000),
    ("Чебоксары", 13000),
    ("Ярославль", 15600),
    ("Железнодорожный", 15600),
    ("Барнаул", 15600),
    ("Тольятти", 16900),
    ("Тюмень", 19500),
    ("Красноярск", 19500),
    ("Оренбург", 19500),
    ("Пенза", 19500),
    ("Архангельск", 19500),
    ("Зеленоград", 20800),
    ("Видное", 20800),
    ("Реутов", 20800),
    ("Коломна", 23400),
    ("Новосибирск", 23400),
    ("Саратов", 23400),
    ("Мытищи", 23400),
    ("Королёв", 23400),
    ("Иваново", 24700),
    ("Сочи", 26000),
    ("Белгород", 26000),
    ("Балашиха", 26000),
    ("Раменское", 26000),
    ("Киров", 28600),
    ("Воронеж", 31200),
    ("Мурманск", 31200),
    ("Санкт-Петербург", 32500),
    ("Егорьевск", 32500),
    ("Липецк", 32500),
    ("Казань", 39000),
    ("Рязань", 39000),
    ("Ханты-Мансийск", 45500),
    ("Лобня", 7800),
    ("Ногинск", 10400),
    ("Колпино", 26000)
]

df = pd.DataFrame(rows, columns=["city", "max_income"])

# --- 2. Оставим только доходы более 5k
df = df[df["max_income"] > 5000].reset_index(drop=True)

# --- 3. Геокодим координаты
geolocator = Nominatim(user_agent="income_map")
geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)
df["loc"] = df["city"].apply(lambda c: geocode(f"{c}, Russia"))
df = df.dropna(subset=["loc"]).copy()
df["lat"] = df["loc"].apply(lambda o: o.latitude)
df["lon"] = df["loc"].apply(lambda o: o.longitude)

# --- 4. Определение цвета
def get_color(inc):
    if inc <= 15000:
        return "green"
    elif inc <= 25000:
        return "yellow"
    else:
        return "red"
df["color"] = df["max_income"].apply(get_color)

# --- 5. Создание карты с прогресс-баром
m = folium.Map(location=[df["lat"].mean(), df["lon"].mean()], zoom_start=5)
cluster = MarkerCluster().add_to(m)

total = len(df)
print(f"Создание карты с {total} городами...")

for i, (_, r) in enumerate(tqdm(df.iterrows(), total=total, desc="Обработка городов", ncols=100), 1):
    popup = f"<b>{r['city']}</b><br>Доход: {r['max_income']:,.0f} ₽"
    folium.Marker(
        location=[r["lat"], r["lon"]],
        popup=popup,
        icon=folium.Icon(color=r["color"])
    ).add_to(cluster)

folium.LayerControl().add_to(m)
m.save("income_map2.html")
print("✅ Карта сохранена в maps/income_map.html")