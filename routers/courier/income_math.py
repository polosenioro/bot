from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from database import cursor
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold
from aiogram.utils.text_decorations import html_decoration as hd
from aiogram.exceptions import TelegramBadRequest

router = Router()

DEFAULT_STATE = {
    "transport": "bike",  # walk | bike | car
    "days": 20,
    "hours": 8
}

TRANSPORT_LABELS = {
    "walk": "üö∂ –ü–µ—à–∫–æ–º",
    "bike": "üö≤ –í–µ–ª–æ",
    "car": "üöó –ê–≤—Ç–æ"
}

def income_keyboard(data: dict) -> InlineKeyboardMarkup:
    transport = data.get("transport", "walk")
    days = data.get("days", 20)
    hours = data.get("hours", 8)

    return InlineKeyboardMarkup(inline_keyboard=[
        # üîπ –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
        [InlineKeyboardButton(text="üåÜ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="select_city_manual")],

        # üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ö–∞–∫ –±—É–¥–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å?"
        [InlineKeyboardButton(text="üöö –ö–∞–∫ –±—É–¥–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å?", callback_data="noop")],

        # üîπ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        [
            InlineKeyboardButton(
                text=f"–ü–µ—à–∫–æ–º{' ‚úÖ' if transport == 'walk' else ''}",
                callback_data="inc_set_transport:walk"
            ),
            InlineKeyboardButton(
                text=f"–í–µ–ª–æ{' ‚úÖ' if transport == 'bike' else ''}",
                callback_data="inc_set_transport:bike"
            ),
            InlineKeyboardButton(
                text=f"–ê–≤—Ç–æ{' ‚úÖ' if transport == 'car' else ''}",
                callback_data="inc_set_transport:car"
            ),
        ],

        # üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
        [InlineKeyboardButton(text="üìÖ –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π:", callback_data="noop")],

        # üîπ –î–Ω–∏
        [
            InlineKeyboardButton(
                text=f"{d}{' ‚úÖ' if days == d else ''}",
                callback_data=f"inc_set_days:{d}"
            ) for d in [10, 15, 20, 25, 30]
        ],

        # üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ß–∞—Å–æ–≤ –≤ –¥–µ–Ω—å"
        [InlineKeyboardButton(text="‚è± –ß–∞—Å–æ–≤ –≤ –¥–µ–Ω—å:", callback_data="noop")],

        # üîπ –ß–∞—Å—ã (–ø–æ 4 –≤ —Ä—è–¥)
        *[
            [
                InlineKeyboardButton(
                    text=f"{h}{' ‚úÖ' if hours == h else ''}",
                    callback_data=f"inc_set_hours:{h}"
                ) for h in chunk
            ] for chunk in [range(4, 8), range(8, 13)]
        ],

        # üîπ –ù–∞–∑–∞–¥
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="go_main_menu")]
    ])

@router.callback_query(F.data == "income_calc")
async def start_income_calc(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    cursor.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    city = result[0] if result and result[0] else None

    if not city:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª–µ '–î–æ—Ö–æ–¥ –∫—É—Ä—å–µ—Ä–∞'.")
        return

    # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É –ø–æ –≥–æ—Ä–æ–¥—É
    cursor.execute("SELECT walk FROM rates WHERE city = ?", (city,))
    row = cursor.fetchone()
    if not row:
        await callback.message.answer(f"‚ùå –í –≥–æ—Ä–æ–¥–µ <b>{city}</b> —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        return

    await state.set_data(DEFAULT_STATE)

    await callback.message.answer(
        f"üìç –í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: <b>{city}</b>\n\n"
        f"üìä –ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥:\n"
        f"‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å √ó 20 –¥–Ω–µ–π\n"
        f"‚Äî –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
        reply_markup=income_keyboard(DEFAULT_STATE),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("inc_set_transport:"))
async def set_transport(callback: CallbackQuery, state: FSMContext):
    transport = callback.data.split(":")[1]
    data = await state.get_data()
    data["transport"] = transport
    await state.set_data(data)
    await update_income_message(callback, data)

@router.callback_query(F.data.startswith("inc_set_days:"))
async def set_days(callback: CallbackQuery, state: FSMContext):
    days = int(callback.data.split(":")[1])
    data = await state.get_data()
    data["days"] = days
    await state.set_data(data)
    await update_income_message(callback, data)

@router.callback_query(F.data.startswith("inc_set_hours:"))
async def set_hours(callback: CallbackQuery, state: FSMContext):
    hours = int(callback.data.split(":")[1])
    data = await state.get_data()
    data["hours"] = hours
    await state.set_data(data)
    await update_income_message(callback, data)

@router.callback_query(F.data == "noop")
async def ignore(callback: CallbackQuery):
    await callback.answer(cache_time=1)

async def update_income_message(callback: CallbackQuery, data: dict):
    user_id = callback.from_user.id

    from database import cursor
    cursor.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    city = result[0] if result and result[0] else None

    if not city:
        await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª–µ '–î–æ—Ö–æ–¥ –∫—É—Ä—å–µ—Ä–∞'.")
        return

    transport = data.get("transport")
    days = data.get("days")
    hours = data.get("hours")

    if not all([transport, days, hours]):
        await callback.message.edit_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä.")
        return

    cursor.execute(f"SELECT {transport} FROM rates WHERE city = ?", (city,))
    row = cursor.fetchone()
    if not row:
        await callback.message.edit_text("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    rate = row[0]
    total = rate * days * hours

    new_text = (
        f"üìç –í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: <b>{city}</b>\n\n"
        f"üíº –ì—Ä–∞—Ñ–∏–∫: <b>{days}</b> –¥–Ω–µ–π √ó <b>{hours}</b> —á–∞—Å–æ–≤\n"
        f"üöö –¢–∏–ø: <b>{TRANSPORT_LABELS[transport]}</b>\n\n"
        f"üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: <b>{total} ‚ÇΩ</b>"
    )
    new_markup = income_keyboard(data)

    try:
        await callback.message.edit_text(
            new_text,
            reply_markup=new_markup,
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return
        raise e










